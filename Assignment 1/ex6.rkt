#lang racket
(define (increment a) (+ a 1))
(define (decrement a) (- a 1))

(define (add-ab a b)
  (if (= a 0)
      b
      (increment (add-ab (decrement a) b))))

(define (sum-ab a b)
  (if (= a 0)
      b
      (sum-ab (decrement a) (increment b))))

;; Part A
;; (add-ab 3 4) is generated by recursive.
;; (increment (add-ab 2 4))
;; (increment (increment (add-ab 1 4)))
;; (increment (increment (increment (add-ab 0 4))))
;; (increment (increment (increment 4)))
;; (increment (increment 5))
;; (increment 6)
;; 7

;; Part B
;; (sum-ab 3 4) is generated by iterative.
;; (sum-ab 3 4)
;; (sum-ab 2 5)
;; (sum-ab 1 6)
;; (sum-ab 0 7)
;; 7